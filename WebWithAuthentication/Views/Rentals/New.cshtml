@model dynamic

@{
    ViewBag.Title = "New Rental Form";

}

<h2>New Rental</h2>

<form id="newRental">
    <div class="form-group">
        <label>Customer</label>
        <div>
            <input id="customer" name="customer" required data-rule-validCustomer="true" type="text" value="" class="form-control" />
        </div>
    </div>
    <div class="form-group">
        <label>Movie</label>
        <div>
            <input id="movie" name="movie" data-rule-atLeastOneMovie="true" type="text" value="" class="form-control" />
        </div>
    </div>

    <div class="row">
        <div class="col-md-4 col-sm-4">
            <ul id="movies" class="list-group"></ul>
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</form>

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval");

    <script>
        $(document).ready(function () {

            var vm = {
                movieIds: []
            };

            var customers = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'), //name is property of customer
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/customers?query=%QUERY', //query is parameter of action in Controller
                    wildcard: '%QUERY'
                }
            });

            $('#customer').typeahead({
                minLength: 3,
                highlight: true
            },
                {
                    name: 'customers',
                    display: 'name',
                    source: customers
                }).on("typeahead:select",
                    function (e, customer) {
                        vm.customerId = customer.id;
                    });

            var movies = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/movies?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#movie').typeahead({
                minLength: 3,
                highlight: true
            },
                {
                    name: 'movies',
                    display: 'name',
                    source: movies
                }).on("typeahead:select",
                    function (e, movie) {
                        $("#movies").append("<li class='list-group-item'>" + movie.name + " <a id=movie" + movie.id+" role='button'>delete</a> </li>");
                        $("#movie").typeahead("val", ""); //change the val of #movie is empty when finished append
                        vm.movieIds.push(movie.id);
                        $("#movie" + movie.id + "").click(function () {
                            vm.movieIds.splice(vm.movieIds.indexOf(movie.id), 1);
                            $(this).closest("li").remove();
                        });
                    });

            

            $.validator.addMethod("validCustomer",
                function () {
                    return vm.customerId && vm.customerId !== 0;
                }, "Please select a valid customer");

            $.validator.addMethod("atLeastOneMovie",
                function () {
                    return vm.movieIds.length > 0;
                }, "Please select at least one movie.");

            var validator = $("#newRental").validate({
                submitHandler: function () {

                    $.ajax({
                        url: "/api/newRentals",
                        method: "post",
                        data: vm
                    }).done(function () {
                        //console.log("done");
                        toastr.success("Rentals successfully.");

                        $("#customer").typeahead("val", "");
                        $("#movie").typeahead("val", "");
                        $("#movies").empty();

                        vm = { movieIds: [] };

                        validator.resetForm();
                    }).fail(function () {
                        toastr.error("Movie is not available");
                    });

                    return false;  //this one will make this handle return the defalt, preventDefault();
                }
            });


        })
    </script>
}
